name: 'Terraform Dev Plan'
on:
  # pull_request:
  #   branches:
  #   - master
  #   paths-ignore:
  #   - 'README.md'
  workflow_dispatch:
    inputs:
    infra_env:
      description: 'Environment of infrastructure'
      required: true
      default: 'test'


env:
  ENV: test
  BUCKET_NAME: aws-ceq-prism-devops-state
  DYNAMO_DB : aws-ceq-prism-devops-statelock
  REGION : us-east-1

# Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
defaults:
  run:
    shell: bash

jobs:  
  terraform:
    name: 'create ceq web infra'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2       

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: run kics Scan
      uses: checkmarx/kics-github-action@v1.5
      with:
        path: .
        output_path: myResults/
      continue-on-error: true

    - name: display kics results
      run: | 
        cat myResults/results.json  

    # - name: Install Terrascan      
    #   run: |
    #     curl --location https://github.com/accurics/terrascan/releases/download/v1.2.0/terrascan_1.2.0_Darwin_x86_64.tar.gz --output terrascan.tar.gz
    #     tar -xvf terrascan.tar.gz
    #     sudo install terrascan /usr/local/bin
    #     terrascan scan -t aws

    - name: Configure AWS credentials from Test account
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{env.REGION}}   

    - name: Setup Remote state
      run: |
        chmod +x backend-script.sh
        ./backend-script.sh $BUCKET_NAME $DYNAMO_DB $REGION
        
    - name: Terraform Init
      run: terraform init -no-color -reconfigure -force-copy -backend-config="bucket=$BUCKET_NAME" -backend-config="key=${{ env.TF_VAR_STATE_FILE }}" -backend-config="dynamodb_table=$DYNAMO_DB" -backend-config="encrypt=true"
      env:
        TF_VAR_STATE_FILE: "$ENV-${{ github.event.repository.name }}.tfstate"  
      
    - name: Terraform Format
      run: terraform fmt
      #continue-on-error: true
      
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -var-file="$ENV/terraform.tfvars" -input=false -lock=false

    - name: Terraform Apply
      #if: github.ref == 'refs/heads/master' && github.event_name == 'push'      
      run: terraform apply -auto-approve -var-file="$ENV/terraform.tfvars" -input=false -lock=false